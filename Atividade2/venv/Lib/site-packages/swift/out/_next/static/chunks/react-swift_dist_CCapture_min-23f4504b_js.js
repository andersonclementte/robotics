/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["react-swift_dist_CCapture_min-23f4504b_js"],{

/***/ "../../react-swift/dist/CCapture.min-23f4504b.js":
/*!*******************************************************!*\
  !*** ../../react-swift/dist/CCapture.min-23f4504b.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"C\": function() { return /* binding */ CCapture_min$1; }\n/* harmony export */ });\n/* harmony import */ var _commonjsHelpers_1c8beb5f_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_commonjsHelpers-1c8beb5f.js */ \"../../react-swift/dist/_commonjsHelpers-1c8beb5f.js\");\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"../../react-swift/node_modules/buffer/index.js\")[\"Buffer\"];\n\n\nvar CCapture_min$2 = {exports: {}};\n\nvar tar = {exports: {}};\n\n(function (module) {\n\n  (function () {\n\n    var lookup = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '/'];\n\n    function clean(length) {\n      var i,\n          buffer = new Uint8Array(length);\n\n      for (i = 0; i < length; i += 1) {\n        buffer[i] = 0;\n      }\n\n      return buffer;\n    }\n\n    function extend(orig, length, addLength, multipleOf) {\n      var newSize = length + addLength,\n          buffer = clean((parseInt(newSize / multipleOf) + 1) * multipleOf);\n      buffer.set(orig);\n      return buffer;\n    }\n\n    function pad(num, bytes, base) {\n      num = num.toString(base || 8);\n      return '000000000000'.substr(num.length + 12 - bytes) + num;\n    }\n\n    function stringToUint8(input, out, offset) {\n      var i, length;\n      out = out || clean(input.length);\n      offset = offset || 0;\n\n      for (i = 0, length = input.length; i < length; i += 1) {\n        out[offset] = input.charCodeAt(i);\n        offset += 1;\n      }\n\n      return out;\n    }\n\n    function uint8ToBase64(uint8) {\n      var i,\n          extraBytes = uint8.length % 3,\n          // if we have 1 byte left, pad 2 bytes\n      output = '',\n          temp,\n          length;\n\n      function tripletToBase64(num) {\n        return lookup[num >> 18 & 0x3f] + lookup[num >> 12 & 0x3f] + lookup[num >> 6 & 0x3f] + lookup[num & 0x3f];\n      } // go through the array every three bytes, we'll deal with trailing stuff later\n\n\n      for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {\n        temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2];\n        output += tripletToBase64(temp);\n      } // this prevents an ERR_INVALID_URL in Chrome (Firefox okay)\n\n\n      switch (output.length % 4) {\n        case 1:\n          output += '=';\n          break;\n\n        case 2:\n          output += '==';\n          break;\n      }\n\n      return output;\n    }\n\n    window.utils = {};\n    window.utils.clean = clean;\n    window.utils.pad = pad;\n    window.utils.extend = extend;\n    window.utils.stringToUint8 = stringToUint8;\n    window.utils.uint8ToBase64 = uint8ToBase64;\n  })();\n\n  (function () {\n    /*\n    struct posix_header {             // byte offset\n    char name[100];               //   0\n    char mode[8];                 // 100\n    char uid[8];                  // 108\n    char gid[8];                  // 116\n    char size[12];                // 124\n    char mtime[12];               // 136\n    char chksum[8];               // 148\n    char typeflag;                // 156\n    char linkname[100];           // 157\n    char magic[6];                // 257\n    char version[2];              // 263\n    char uname[32];               // 265\n    char gname[32];               // 297\n    char devmajor[8];             // 329\n    char devminor[8];             // 337\n    char prefix[155];             // 345\n                                    // 500\n    };\n    */\n\n    var utils = window.utils,\n        headerFormat;\n    headerFormat = [{\n      field: 'fileName',\n      length: 100\n    }, {\n      field: 'fileMode',\n      length: 8\n    }, {\n      field: 'uid',\n      length: 8\n    }, {\n      field: 'gid',\n      length: 8\n    }, {\n      field: 'fileSize',\n      length: 12\n    }, {\n      field: 'mtime',\n      length: 12\n    }, {\n      field: 'checksum',\n      length: 8\n    }, {\n      field: 'type',\n      length: 1\n    }, {\n      field: 'linkName',\n      length: 100\n    }, {\n      field: 'ustar',\n      length: 8\n    }, {\n      field: 'owner',\n      length: 32\n    }, {\n      field: 'group',\n      length: 32\n    }, {\n      field: 'majorNumber',\n      length: 8\n    }, {\n      field: 'minorNumber',\n      length: 8\n    }, {\n      field: 'filenamePrefix',\n      length: 155\n    }, {\n      field: 'padding',\n      length: 12\n    }];\n\n    function formatHeader(data, cb) {\n      var buffer = utils.clean(512),\n          offset = 0;\n      headerFormat.forEach(function (value) {\n        var str = data[value.field] || '',\n            i,\n            length;\n\n        for (i = 0, length = str.length; i < length; i += 1) {\n          buffer[offset] = str.charCodeAt(i);\n          offset += 1;\n        }\n\n        offset += value.length - i; // space it out with nulls\n      });\n\n      if (typeof cb === 'function') {\n        return cb(buffer, offset);\n      }\n\n      return buffer;\n    }\n\n    window.header = {};\n    window.header.structure = headerFormat;\n    window.header.format = formatHeader;\n  })();\n\n  (function () {\n\n    var header = window.header,\n        utils = window.utils,\n        recordSize = 512,\n        blockSize;\n\n    function Tar(recordsPerBlock) {\n      this.written = 0;\n      blockSize = (recordsPerBlock || 20) * recordSize;\n      this.out = utils.clean(blockSize);\n      this.blocks = [];\n      this.length = 0;\n    }\n\n    Tar.prototype.append = function (filepath, input, opts, callback) {\n      var data, checksum, mode, mtime, uid, gid, headerArr;\n\n      if (typeof input === 'string') {\n        input = utils.stringToUint8(input);\n      } else if (input.constructor !== Uint8Array.prototype.constructor) {\n        throw 'Invalid input type. You gave me: ' + input.constructor.toString().match(/function\\s*([$A-Za-z_][0-9A-Za-z_]*)\\s*\\(/)[1];\n      }\n\n      if (typeof opts === 'function') {\n        opts = {};\n      }\n\n      opts = opts || {};\n      mode = opts.mode || parseInt('777', 8) & 0xfff;\n      mtime = opts.mtime || Math.floor(+new Date() / 1000);\n      uid = opts.uid || 0;\n      gid = opts.gid || 0;\n      data = {\n        fileName: filepath,\n        fileMode: utils.pad(mode, 7),\n        uid: utils.pad(uid, 7),\n        gid: utils.pad(gid, 7),\n        fileSize: utils.pad(input.length, 11),\n        mtime: utils.pad(mtime, 11),\n        checksum: '        ',\n        type: '0',\n        // just a file\n        ustar: 'ustar  ',\n        owner: opts.owner || '',\n        group: opts.group || ''\n      }; // calculate the checksum\n\n      checksum = 0;\n      Object.keys(data).forEach(function (key) {\n        var i,\n            value = data[key],\n            length;\n\n        for (i = 0, length = value.length; i < length; i += 1) {\n          checksum += value.charCodeAt(i);\n        }\n      });\n      data.checksum = utils.pad(checksum, 6) + '\\u0000 ';\n      headerArr = header.format(data);\n      var headerLength = Math.ceil(headerArr.length / recordSize) * recordSize;\n      var inputLength = Math.ceil(input.length / recordSize) * recordSize;\n      this.blocks.push({\n        header: headerArr,\n        input: input,\n        headerLength: headerLength,\n        inputLength: inputLength\n      });\n    };\n\n    Tar.prototype.save = function () {\n      var buffers = [];\n      var chunks = [];\n      var length = 0;\n      var max = Math.pow(2, 20);\n      var chunk = [];\n      this.blocks.forEach(function (b) {\n        if (length + b.headerLength + b.inputLength > max) {\n          chunks.push({\n            blocks: chunk,\n            length: length\n          });\n          chunk = [];\n          length = 0;\n        }\n\n        chunk.push(b);\n        length += b.headerLength + b.inputLength;\n      });\n      chunks.push({\n        blocks: chunk,\n        length: length\n      });\n      chunks.forEach(function (c) {\n        var buffer = new Uint8Array(c.length);\n        var written = 0;\n        c.blocks.forEach(function (b) {\n          buffer.set(b.header, written);\n          written += b.headerLength;\n          buffer.set(b.input, written);\n          written += b.inputLength;\n        });\n        buffers.push(buffer);\n      });\n      buffers.push(new Uint8Array(2 * recordSize));\n      return new Blob(buffers, {\n        type: 'octet/stream'\n      });\n    };\n\n    Tar.prototype.clear = function () {\n      this.written = 0;\n      this.out = utils.clean(blockSize);\n    };\n\n    {\n      module.exports = Tar;\n    }\n  })();\n})(tar);\n\nvar download = {exports: {}};\n\n(function (module, exports) {\n\n  (function (root, factory) {\n    {\n      // Node. Does not work with strict CommonJS, but\n      // only CommonJS-like environments that support module.exports,\n      // like Node.\n      module.exports = factory();\n    }\n  })(_commonjsHelpers_1c8beb5f_js__WEBPACK_IMPORTED_MODULE_0__.c, function () {\n    return function download(data, strFileName, strMimeType) {\n      var self = window,\n          // this script is only for browsers anyway...\n      defaultMime = 'application/octet-stream',\n          // this default mime also triggers iframe downloads\n      mimeType = strMimeType || defaultMime,\n          payload = data,\n          url = !strFileName && !strMimeType && payload,\n          anchor = document.createElement('a'),\n          toString = function (a) {\n        return String(a);\n      },\n          myBlob = self.Blob || self.MozBlob || self.WebKitBlob || toString,\n          fileName = strFileName || 'download',\n          blob,\n          reader;\n\n      myBlob = myBlob.call ? myBlob.bind(self) : Blob;\n\n      if (String(this) === 'true') {\n        //reverse arguments, allowing download.bind(true, \"text/xml\", \"export.xml\") to act as a callback\n        payload = [payload, mimeType];\n        mimeType = payload[0];\n        payload = payload[1];\n      }\n\n      if (url && url.length < 2048) {\n        // if no filename and no mime, assume a url was passed as the only argument\n        fileName = url.split('/').pop().split('?')[0];\n        anchor.href = url; // assign href prop to temp anchor\n\n        if (anchor.href.indexOf(url) !== -1) {\n          // if the browser determines that it's a potentially valid url path:\n          var ajax = new XMLHttpRequest();\n          ajax.open('GET', url, true);\n          ajax.responseType = 'blob';\n\n          ajax.onload = function (e) {\n            download(e.target.response, fileName, defaultMime);\n          };\n\n          setTimeout(function () {\n            ajax.send();\n          }, 0); // allows setting custom ajax headers using the return:\n\n          return ajax;\n        } // end if valid url?\n\n      } // end if url?\n      //go ahead and download dataURLs right away\n\n\n      if (/^data:([\\w+-]+\\/[\\w+.-]+)?[,;]/.test(payload)) {\n        if (payload.length > 1024 * 1024 * 1.999 && myBlob !== toString) {\n          payload = dataUrlToBlob(payload);\n          mimeType = payload.type || defaultMime;\n        } else {\n          return navigator.msSaveBlob // IE10 can't do a[download], only Blobs:\n          ? navigator.msSaveBlob(dataUrlToBlob(payload), fileName) : saver(payload); // everyone else can save dataURLs un-processed\n        }\n      } else {\n        //not data url, is it a string with special needs?\n        if (/([\\x80-\\xff])/.test(payload)) {\n          var i = 0,\n              tempUiArr = new Uint8Array(payload.length),\n              mx = tempUiArr.length;\n\n          for (i; i < mx; ++i) tempUiArr[i] = payload.charCodeAt(i);\n\n          payload = new myBlob([tempUiArr], {\n            type: mimeType\n          });\n        }\n      }\n\n      blob = payload instanceof myBlob ? payload : new myBlob([payload], {\n        type: mimeType\n      });\n\n      function dataUrlToBlob(strUrl) {\n        var parts = strUrl.split(/[:;,]/),\n            type = parts[1],\n            indexDecoder = strUrl.indexOf('charset') > 0 ? 3 : 2,\n            decoder = parts[indexDecoder] == 'base64' ? atob : decodeURIComponent,\n            binData = decoder(parts.pop()),\n            mx = binData.length,\n            i = 0,\n            uiArr = new Uint8Array(mx);\n\n        for (i; i < mx; ++i) uiArr[i] = binData.charCodeAt(i);\n\n        return new myBlob([uiArr], {\n          type: type\n        });\n      }\n\n      function saver(url, winMode) {\n        if ('download' in anchor) {\n          //html5 A[download]\n          anchor.href = url;\n          anchor.setAttribute('download', fileName);\n          anchor.className = 'download-js-link';\n          anchor.innerHTML = 'downloading...';\n          anchor.style.display = 'none';\n          anchor.addEventListener('click', function (e) {\n            e.stopPropagation();\n            this.removeEventListener('click', arguments.callee);\n          });\n          document.body.appendChild(anchor);\n          setTimeout(function () {\n            anchor.click();\n            document.body.removeChild(anchor);\n\n            if (winMode === true) {\n              setTimeout(function () {\n                self.URL.revokeObjectURL(anchor.href);\n              }, 250);\n            }\n          }, 66);\n          return true;\n        } // handle non-a[download] safari as best we can:\n\n\n        if (/(Version)\\/(\\d+)\\.(\\d+)(?:\\.(\\d+))?.*Safari\\//.test(navigator.userAgent)) {\n          if (/^data:/.test(url)) url = 'data:' + url.replace(/^data:([\\w\\/\\-\\+]+)/, defaultMime);\n\n          if (!window.open(url)) {\n            // popup blocked, offer direct download:\n            if (confirm('Displaying New Document\\n\\nUse Save As... to download, then click back to return to this page.')) {\n              location.href = url;\n            }\n          }\n\n          return true;\n        } //do iframe dataURL download (old ch+FF):\n\n\n        var f = document.createElement('iframe');\n        document.body.appendChild(f);\n\n        if (!winMode && /^data:/.test(url)) {\n          // force a mime that will download:\n          url = 'data:' + url.replace(/^data:([\\w\\/\\-\\+]+)/, defaultMime);\n        }\n\n        f.src = url;\n        setTimeout(function () {\n          document.body.removeChild(f);\n        }, 333);\n      } //end saver\n\n\n      if (navigator.msSaveBlob) {\n        // IE10+ : (has Blob, but not a[download] or URL)\n        return navigator.msSaveBlob(blob, fileName);\n      }\n\n      if (self.URL) {\n        // simple fast and modern way using Blob and URL:\n        saver(self.URL.createObjectURL(blob), true);\n      } else {\n        // handle non-Blob()+non-URL browsers:\n        if (typeof blob === 'string' || blob.constructor === toString) {\n          try {\n            return saver('data:' + mimeType + ';base64,' + self.btoa(blob));\n          } catch (y) {\n            return saver('data:' + mimeType + ',' + encodeURIComponent(blob));\n          }\n        } // Blob but not URL support:\n\n\n        reader = new FileReader();\n\n        reader.onload = function (e) {\n          saver(this.result);\n        };\n\n        reader.readAsDataURL(blob);\n      }\n\n      return true;\n    };\n    /* end download() */\n  });\n})(download);\n\nvar gif = {};\n\n(function (c) {\n  function a(b, d) {\n    if ({}.hasOwnProperty.call(a.cache, b)) return a.cache[b];\n    var e = a.resolve(b);\n    if (!e) throw new Error('Failed to resolve module ' + b);\n    var c = {\n      id: b,\n      require: a,\n      filename: b,\n      exports: {},\n      loaded: !1,\n      parent: d,\n      children: []\n    };\n    d && d.children.push(c);\n    var f = b.slice(0, b.lastIndexOf('/') + 1);\n    return a.cache[b] = c.exports, e.call(c.exports, c, c.exports, f, b), c.loaded = !0, a.cache[b] = c.exports;\n  }\n  a.modules = {}, a.cache = {}, a.resolve = function (b) {\n    return {}.hasOwnProperty.call(a.modules, b) ? a.modules[b] : void 0;\n  }, a.define = function (b, c) {\n    a.modules[b] = c;\n  };\n\n  var b = function (a) {\n    return a = '/', {\n      title: 'browser',\n      version: 'v0.10.26',\n      browser: !0,\n      env: {},\n      argv: [],\n      nextTick: c.setImmediate || function (a) {\n        setTimeout(a, 0);\n      },\n      cwd: function () {\n        return a;\n      },\n      chdir: function (b) {\n        a = b;\n      }\n    };\n  }();\n\n  a.define('/gif.coffee', function (d, m, l, k) {\n    function g(a, b) {\n      return {}.hasOwnProperty.call(a, b);\n    }\n\n    function j(d, b) {\n      for (var a = 0, c = b.length; a < c; ++a) if (a in b && b[a] === d) return !0;\n\n      return !1;\n    }\n\n    function i(a, b) {\n      function d() {\n        this.constructor = a;\n      }\n\n      for (var c in b) g(b, c) && (a[c] = b[c]);\n\n      return d.prototype = b.prototype, a.prototype = new d(), a.__super__ = b.prototype, a;\n    }\n\n    var h, c, f, b, e;\n    f = a('events', d).EventEmitter, h = a('/browser.coffee', d), e = function (d) {\n      function a(d) {\n        var a, b;\n        this.running = !1, this.options = {}, this.frames = [], this.freeWorkers = [], this.activeWorkers = [], this.setOptions(d);\n\n        for (a in c) b = c[a], null != this.options[a] ? this.options[a] : this.options[a] = b;\n      }\n\n      return i(a, d), c = {\n        workerScript: 'gif.worker.js',\n        workers: 2,\n        repeat: 0,\n        background: '#fff',\n        quality: 10,\n        width: null,\n        height: null,\n        transparent: null\n      }, b = {\n        delay: 500,\n        copy: !1\n      }, a.prototype.setOption = function (a, b) {\n        return this.options[a] = b, null != this._canvas && (a === 'width' || a === 'height') ? this._canvas[a] = b : void 0;\n      }, a.prototype.setOptions = function (b) {\n        var a, c;\n        return function (d) {\n          for (a in b) {\n            if (!g(b, a)) continue;\n            c = b[a], d.push(this.setOption(a, c));\n          }\n\n          return d;\n        }.call(this, []);\n      }, a.prototype.addFrame = function (a, d) {\n        var c, e;\n        null == d && (d = {}), c = {}, c.transparent = this.options.transparent;\n\n        for (e in b) c[e] = d[e] || b[e];\n\n        if (null != this.options.width || this.setOption('width', a.width), null != this.options.height || this.setOption('height', a.height), 'undefined' !== typeof ImageData && null != ImageData && a instanceof ImageData) c.data = a.data;else if ('undefined' !== typeof CanvasRenderingContext2D && null != CanvasRenderingContext2D && a instanceof CanvasRenderingContext2D || 'undefined' !== typeof WebGLRenderingContext && null != WebGLRenderingContext && a instanceof WebGLRenderingContext) d.copy ? c.data = this.getContextData(a) : c.context = a;else if (null != a.childNodes) d.copy ? c.data = this.getImageData(a) : c.image = a;else throw new Error('Invalid image');\n        return this.frames.push(c);\n      }, a.prototype.render = function () {\n        var a;\n        if (this.running) throw new Error('Already running');\n        if (!(null != this.options.width && null != this.options.height)) throw new Error('Width and height must be set prior to rendering');\n        this.running = !0, this.nextFrame = 0, this.finishedFrames = 0, this.imageParts = function (c) {\n          for (var b = function () {\n            var b;\n            b = [];\n\n            for (var a = 0; 0 <= this.frames.length ? a < this.frames.length : a > this.frames.length; 0 <= this.frames.length ? ++a : --a) b.push(a);\n\n            return b;\n          }.apply(this, arguments), a = 0, e = b.length; a < e; ++a) c.push(null);\n\n          return c;\n        }.call(this, []), a = this.spawnWorkers();\n\n        for (var c = function () {\n          var c;\n          c = [];\n\n          for (var b = 0; 0 <= a ? b < a : b > a; 0 <= a ? ++b : --b) c.push(b);\n\n          return c;\n        }.apply(this, arguments), b = 0, e = c.length; b < e; ++b) this.renderNextFrame();\n\n        return this.emit('start'), this.emit('progress', 0);\n      }, a.prototype.abort = function () {\n        var a;\n\n        while (!0) {\n          if (a = this.activeWorkers.shift(), !(null != a)) break;\n          console.log('killing active worker'), a.terminate();\n        }\n\n        return this.running = !1, this.emit('abort');\n      }, a.prototype.spawnWorkers = function () {\n        var a;\n        return a = Math.min(this.options.workers, this.frames.length), function () {\n          var c;\n          c = [];\n\n          for (var b = this.freeWorkers.length; this.freeWorkers.length <= a ? b < a : b > a; this.freeWorkers.length <= a ? ++b : --b) c.push(b);\n\n          return c;\n        }.apply(this, arguments).forEach(function (a) {\n          return function (c) {\n            var b;\n            return console.log('spawning worker ' + c), b = new Worker(a.options.workerScript), b.onmessage = function (a) {\n              return function (c) {\n                return a.activeWorkers.splice(a.activeWorkers.indexOf(b), 1), a.freeWorkers.push(b), a.frameFinished(c.data);\n              };\n            }(a), a.freeWorkers.push(b);\n          };\n        }(this)), a;\n      }, a.prototype.frameFinished = function (a) {\n        return console.log('frame ' + a.index + ' finished - ' + this.activeWorkers.length + ' active'), this.finishedFrames++, this.emit('progress', this.finishedFrames / this.frames.length), this.imageParts[a.index] = a, j(null, this.imageParts) ? this.renderNextFrame() : this.finishRendering();\n      }, a.prototype.finishRendering = function () {\n        var e, a, k, m, b, d, h;\n        b = 0;\n\n        for (var f = 0, j = this.imageParts.length; f < j; ++f) a = this.imageParts[f], b += (a.data.length - 1) * a.pageSize + a.cursor;\n\n        b += a.pageSize - a.cursor, console.log('rendering finished - filesize ' + Math.round(b / 1e3) + 'kb'), e = new Uint8Array(b), d = 0;\n\n        for (var g = 0, l = this.imageParts.length; g < l; ++g) {\n          a = this.imageParts[g];\n\n          for (var c = 0, i = a.data.length; c < i; ++c) h = a.data[c], k = c, e.set(h, d), k === a.data.length - 1 ? d += a.cursor : d += a.pageSize;\n        }\n\n        return m = new Blob([e], {\n          type: 'image/gif'\n        }), this.emit('finished', m, e);\n      }, a.prototype.renderNextFrame = function () {\n        var c, a, b;\n        if (this.freeWorkers.length === 0) throw new Error('No free workers');\n        return this.nextFrame >= this.frames.length ? void 0 : (c = this.frames[this.nextFrame++], b = this.freeWorkers.shift(), a = this.getTask(c), console.log('starting frame ' + (a.index + 1) + ' of ' + this.frames.length), this.activeWorkers.push(b), b.postMessage(a));\n      }, a.prototype.getContextData = function (a) {\n        return a.getImageData(0, 0, this.options.width, this.options.height).data;\n      }, a.prototype.getImageData = function (b) {\n        var a;\n        return null != this._canvas || (this._canvas = document.createElement('canvas'), this._canvas.width = this.options.width, this._canvas.height = this.options.height), a = this._canvas.getContext('2d'), a.setFill = this.options.background, a.fillRect(0, 0, this.options.width, this.options.height), a.drawImage(b, 0, 0), this.getContextData(a);\n      }, a.prototype.getTask = function (a) {\n        var c, b;\n        if (c = this.frames.indexOf(a), b = {\n          index: c,\n          last: c === this.frames.length - 1,\n          delay: a.delay,\n          transparent: a.transparent,\n          width: this.options.width,\n          height: this.options.height,\n          quality: this.options.quality,\n          repeat: this.options.repeat,\n          canTransfer: h.name === 'chrome'\n        }, null != a.data) b.data = a.data;else if (null != a.context) b.data = this.getContextData(a.context);else if (null != a.image) b.data = this.getImageData(a.image);else throw new Error('Invalid frame');\n        return b;\n      }, a;\n    }(f), d.exports = e;\n  }), a.define('/browser.coffee', function (f, g, h, i) {\n    var a, d, e, c, b;\n    c = navigator.userAgent.toLowerCase(), e = navigator.platform.toLowerCase(), b = c.match(/(opera|ie|firefox|chrome|version)[\\s\\/:]([\\w\\d\\.]+)?.*?(safari|version[\\s\\/:]([\\w\\d\\.]+)|$)/) || [null, 'unknown', 0], d = b[1] === 'ie' && document.documentMode, a = {\n      name: b[1] === 'version' ? b[3] : b[1],\n      version: d || parseFloat(b[1] === 'opera' && b[4] ? b[4] : b[2]),\n      platform: {\n        name: c.match(/ip(?:ad|od|hone)/) ? 'ios' : (c.match(/(?:webos|android)/) || e.match(/mac|win|linux/) || ['other'])[0]\n      }\n    }, a[a.name] = !0, a[a.name + parseInt(a.version, 10)] = !0, a.platform[a.platform.name] = !0, f.exports = a;\n  }), a.define('events', function (f, e, g, h) {\n    b.EventEmitter || (b.EventEmitter = function () {});\n    var a = e.EventEmitter = b.EventEmitter,\n        c = typeof Array.isArray === 'function' ? Array.isArray : function (a) {\n      return Object.prototype.toString.call(a) === '[object Array]';\n    },\n        d = 10;\n    a.prototype.setMaxListeners = function (a) {\n      this._events || (this._events = {}), this._events.maxListeners = a;\n    }, a.prototype.emit = function (f) {\n      if (f === 'error' && (!(this._events && this._events.error) || c(this._events.error) && !this._events.error.length)) throw arguments[1] instanceof Error ? arguments[1] : new Error(\"Uncaught, unspecified 'error' event.\");\n      if (!this._events) return !1;\n      var a = this._events[f];\n      if (!a) return !1;\n      if (!(typeof a == 'function')) if (c(a)) {\n        var b = Array.prototype.slice.call(arguments, 1),\n            e = a.slice();\n\n        for (var d = 0, g = e.length; d < g; d++) e[d].apply(this, b);\n\n        return !0;\n      } else return !1;\n\n      switch (arguments.length) {\n        case 1:\n          a.call(this);\n          break;\n\n        case 2:\n          a.call(this, arguments[1]);\n          break;\n\n        case 3:\n          a.call(this, arguments[1], arguments[2]);\n          break;\n\n        default:\n          var b = Array.prototype.slice.call(arguments, 1);\n          a.apply(this, b);\n      }\n\n      return !0;\n    }, a.prototype.addListener = function (a, b) {\n      if ('function' !== typeof b) throw new Error('addListener only takes instances of Function');\n      if (this._events || (this._events = {}), this.emit('newListener', a, b), !this._events[a]) this._events[a] = b;else if (c(this._events[a])) {\n        if (!this._events[a].warned) {\n          var e;\n          this._events.maxListeners !== undefined ? e = this._events.maxListeners : e = d, e && e > 0 && this._events[a].length > e && (this._events[a].warned = !0, console.error('(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.', this._events[a].length), console.trace());\n        }\n\n        this._events[a].push(b);\n      } else this._events[a] = [this._events[a], b];\n      return this;\n    }, a.prototype.on = a.prototype.addListener, a.prototype.once = function (b, c) {\n      var a = this;\n      return a.on(b, function d() {\n        a.removeListener(b, d), c.apply(this, arguments);\n      }), this;\n    }, a.prototype.removeListener = function (a, d) {\n      if ('function' !== typeof d) throw new Error('removeListener only takes instances of Function');\n      if (!(this._events && this._events[a])) return this;\n      var b = this._events[a];\n\n      if (c(b)) {\n        var e = b.indexOf(d);\n        if (e < 0) return this;\n        b.splice(e, 1), b.length == 0 && delete this._events[a];\n      } else this._events[a] === d && delete this._events[a];\n\n      return this;\n    }, a.prototype.removeAllListeners = function (a) {\n      return a && this._events && this._events[a] && (this._events[a] = null), this;\n    }, a.prototype.listeners = function (a) {\n      return this._events || (this._events = {}), this._events[a] || (this._events[a] = []), c(this._events[a]) || (this._events[a] = [this._events[a]]), this._events[a];\n    };\n  }), c.GIF = a('/gif.coffee');\n}).call(_commonjsHelpers_1c8beb5f_js__WEBPACK_IMPORTED_MODULE_0__.c, _commonjsHelpers_1c8beb5f_js__WEBPACK_IMPORTED_MODULE_0__.c); // gif.js 0.1.6 - https://github.com/jnordberg/gif.js\n\nvar webmWriter0_2_0 = {exports: {}};\n\n/**\n * A tool for presenting an ArrayBuffer as a stream for writing some simple data types.\n *\n * By Nicholas Sherlock\n *\n * Released under the WTFPLv2 https://en.wikipedia.org/wiki/WTFPL\n */\n\n(function (module) {\n\n  (function () {\n    var isNodeEnviroment = 'object' !== 'undefined';\n    var isNodeEnviroment = false;\n    /**\n     * Create an ArrayBuffer of the given length and present it as a writable stream with methods\n     * for writing data in different formats.\n     */\n\n    var ArrayBufferDataStream = function (length) {\n      this.data = new Uint8Array(length);\n      this.pos = 0;\n    };\n\n    ArrayBufferDataStream.prototype.seek = function (offset) {\n      this.pos = offset;\n    };\n\n    ArrayBufferDataStream.prototype.writeBytes = function (arr) {\n      for (var i = 0; i < arr.length; i++) {\n        this.data[this.pos++] = arr[i];\n      }\n    };\n\n    ArrayBufferDataStream.prototype.writeByte = function (b) {\n      this.data[this.pos++] = b;\n    }; //Synonym:\n\n\n    ArrayBufferDataStream.prototype.writeU8 = ArrayBufferDataStream.prototype.writeByte;\n\n    ArrayBufferDataStream.prototype.writeU16BE = function (u) {\n      this.data[this.pos++] = u >> 8;\n      this.data[this.pos++] = u;\n    };\n\n    ArrayBufferDataStream.prototype.writeDoubleBE = function (d) {\n      var bytes = new Uint8Array(new Float64Array([d]).buffer);\n\n      for (var i = bytes.length - 1; i >= 0; i--) {\n        this.writeByte(bytes[i]);\n      }\n    };\n\n    ArrayBufferDataStream.prototype.writeFloatBE = function (d) {\n      var bytes = new Uint8Array(new Float32Array([d]).buffer);\n\n      for (var i = bytes.length - 1; i >= 0; i--) {\n        this.writeByte(bytes[i]);\n      }\n    };\n    /**\n     * Write an ASCII string to the stream\n     */\n\n\n    ArrayBufferDataStream.prototype.writeString = function (s) {\n      for (var i = 0; i < s.length; i++) {\n        this.data[this.pos++] = s.charCodeAt(i);\n      }\n    };\n    /**\n     * Write the given 32-bit integer to the stream as an EBML variable-length integer using the given byte width\n     * (use measureEBMLVarInt).\n     *\n     * No error checking is performed to ensure that the supplied width is correct for the integer.\n     *\n     * @param i Integer to be written\n     * @param width Number of bytes to write to the stream\n     */\n\n\n    ArrayBufferDataStream.prototype.writeEBMLVarIntWidth = function (i, width) {\n      switch (width) {\n        case 1:\n          this.writeU8(1 << 7 | i);\n          break;\n\n        case 2:\n          this.writeU8(1 << 6 | i >> 8);\n          this.writeU8(i);\n          break;\n\n        case 3:\n          this.writeU8(1 << 5 | i >> 16);\n          this.writeU8(i >> 8);\n          this.writeU8(i);\n          break;\n\n        case 4:\n          this.writeU8(1 << 4 | i >> 24);\n          this.writeU8(i >> 16);\n          this.writeU8(i >> 8);\n          this.writeU8(i);\n          break;\n\n        case 5:\n          /*\n           * JavaScript converts its doubles to 32-bit integers for bitwise operations, so we need to do a\n           * division by 2^32 instead of a right-shift of 32 to retain those top 3 bits\n           */\n          this.writeU8(1 << 3 | i / 4294967296 & 0x7);\n          this.writeU8(i >> 24);\n          this.writeU8(i >> 16);\n          this.writeU8(i >> 8);\n          this.writeU8(i);\n          break;\n\n        default:\n          throw new RuntimeException('Bad EBML VINT size ' + width);\n      }\n    };\n    /**\n     * Return the number of bytes needed to encode the given integer as an EBML VINT.\n     */\n\n\n    ArrayBufferDataStream.prototype.measureEBMLVarInt = function (val) {\n      if (val < (1 << 7) - 1) {\n        /* Top bit is set, leaving 7 bits to hold the integer, but we can't store 127 because\n         * \"all bits set to one\" is a reserved value. Same thing for the other cases below:\n         */\n        return 1;\n      } else if (val < (1 << 14) - 1) {\n        return 2;\n      } else if (val < (1 << 21) - 1) {\n        return 3;\n      } else if (val < (1 << 28) - 1) {\n        return 4;\n      } else if (val < 34359738367) {\n        // 2 ^ 35 - 1 (can address 32GB)\n        return 5;\n      } else {\n        throw new RuntimeException('EBML VINT size not supported ' + val);\n      }\n    };\n\n    ArrayBufferDataStream.prototype.writeEBMLVarInt = function (i) {\n      this.writeEBMLVarIntWidth(i, this.measureEBMLVarInt(i));\n    };\n    /**\n     * Write the given unsigned 32-bit integer to the stream in big-endian order using the given byte width.\n     * No error checking is performed to ensure that the supplied width is correct for the integer.\n     *\n     * Omit the width parameter to have it determined automatically for you.\n     *\n     * @param u Unsigned integer to be written\n     * @param width Number of bytes to write to the stream\n     */\n\n\n    ArrayBufferDataStream.prototype.writeUnsignedIntBE = function (u, width) {\n      if (width === undefined) {\n        width = this.measureUnsignedInt(u);\n      } // Each case falls through:\n\n\n      switch (width) {\n        case 5:\n          this.writeU8(Math.floor(u / 4294967296));\n        // Need to use division to access >32 bits of floating point var\n\n        case 4:\n          this.writeU8(u >> 24);\n\n        case 3:\n          this.writeU8(u >> 16);\n\n        case 2:\n          this.writeU8(u >> 8);\n\n        case 1:\n          this.writeU8(u);\n          break;\n\n        default:\n          throw new RuntimeException('Bad UINT size ' + width);\n      }\n    };\n    /**\n     * Return the number of bytes needed to hold the non-zero bits of the given unsigned integer.\n     */\n\n\n    ArrayBufferDataStream.prototype.measureUnsignedInt = function (val) {\n      // Force to 32-bit unsigned integer\n      if (val < 1 << 8) {\n        return 1;\n      } else if (val < 1 << 16) {\n        return 2;\n      } else if (val < 1 << 24) {\n        return 3;\n      } else if (val < 4294967296) {\n        return 4;\n      } else {\n        return 5;\n      }\n    };\n    /**\n     * Return a view on the portion of the buffer from the beginning to the current seek position as a Uint8Array.\n     */\n\n\n    ArrayBufferDataStream.prototype.getAsDataArray = function () {\n      if (this.pos < this.data.byteLength) {\n        return this.data.subarray(0, this.pos);\n      } else if (this.pos == this.data.byteLength) {\n        return this.data;\n      } else {\n        throw \"ArrayBufferDataStream's pos lies beyond end of buffer\";\n      }\n    };\n\n    window.ArrayBufferDataStream = ArrayBufferDataStream;\n    /**\n     * Allows a series of Blob-convertible objects (ArrayBuffer, Blob, String, etc) to be added to a buffer. Seeking and\n     * overwriting of blobs is allowed.\n     *\n     * You can supply a FileWriter, in which case the BlobBuffer is just used as temporary storage before it writes it\n     * through to the disk.\n     *\n     * By Nicholas Sherlock\n     *\n     * Released under the WTFPLv2 https://en.wikipedia.org/wiki/WTFPL\n     */\n\n    var BlobBuffer = function (fs) {\n      return function (destination) {\n        var buffer = [],\n            writePromise = Promise.resolve(),\n            fileWriter = null,\n            fd = null;\n\n        if (typeof FileWriter !== 'undefined' && destination instanceof FileWriter) {\n          fileWriter = destination;\n        } else if (fs && destination) {\n          fd = destination;\n        } // Current seek offset\n\n\n        this.pos = 0; // One more than the index of the highest byte ever written\n\n        this.length = 0; // Returns a promise that converts the blob to an ArrayBuffer\n\n        function readBlobAsBuffer(blob) {\n          return new Promise(function (resolve, reject) {\n            var reader = new FileReader();\n            reader.addEventListener('loadend', function () {\n              resolve(reader.result);\n            });\n            reader.readAsArrayBuffer(blob);\n          });\n        }\n\n        function convertToUint8Array(thing) {\n          return new Promise(function (resolve, reject) {\n            if (thing instanceof Uint8Array) {\n              resolve(thing);\n            } else if (thing instanceof ArrayBuffer || ArrayBuffer.isView(thing)) {\n              resolve(new Uint8Array(thing));\n            } else if (thing instanceof Blob) {\n              resolve(readBlobAsBuffer(thing).then(function (buffer) {\n                return new Uint8Array(buffer);\n              }));\n            } else {\n              //Assume that Blob will know how to read this thing\n              resolve(readBlobAsBuffer(new Blob([thing])).then(function (buffer) {\n                return new Uint8Array(buffer);\n              }));\n            }\n          });\n        }\n\n        function measureData(data) {\n          var result = data.byteLength || data.length || data.size;\n\n          if (!Number.isInteger(result)) {\n            throw 'Failed to determine size of element';\n          }\n\n          return result;\n        }\n        /**\n         * Seek to the given absolute offset.\n         *\n         * You may not seek beyond the end of the file (this would create a hole and/or allow blocks to be written in non-\n         * sequential order, which isn't currently supported by the memory buffer backend).\n         */\n\n\n        this.seek = function (offset) {\n          if (offset < 0) {\n            throw 'Offset may not be negative';\n          }\n\n          if (isNaN(offset)) {\n            throw 'Offset may not be NaN';\n          }\n\n          if (offset > this.length) {\n            throw 'Seeking beyond the end of file is not allowed';\n          }\n\n          this.pos = offset;\n        };\n        /**\n         * Write the Blob-convertible data to the buffer at the current seek position.\n         *\n         * Note: If overwriting existing data, the write must not cross preexisting block boundaries (written data must\n         * be fully contained by the extent of a previous write).\n         */\n\n\n        this.write = function (data) {\n          var newEntry = {\n            offset: this.pos,\n            data: data,\n            length: measureData(data)\n          },\n              isAppend = newEntry.offset >= this.length;\n          this.pos += newEntry.length;\n          this.length = Math.max(this.length, this.pos); // After previous writes complete, perform our write\n\n          writePromise = writePromise.then(function () {\n            if (fd) {\n              return new Promise(function (resolve, reject) {\n                convertToUint8Array(newEntry.data).then(function (dataArray) {\n                  var totalWritten = 0,\n                      buffer = Buffer.from(dataArray.buffer),\n                      handleWriteComplete = function (err, written, buffer) {\n                    totalWritten += written;\n\n                    if (totalWritten >= buffer.length) {\n                      resolve();\n                    } else {\n                      // We still have more to write...\n                      fs.write(fd, buffer, totalWritten, buffer.length - totalWritten, newEntry.offset + totalWritten, handleWriteComplete);\n                    }\n                  };\n\n                  fs.write(fd, buffer, 0, buffer.length, newEntry.offset, handleWriteComplete);\n                });\n              });\n            } else if (fileWriter) {\n              return new Promise(function (resolve, reject) {\n                fileWriter.onwriteend = resolve;\n                fileWriter.seek(newEntry.offset);\n                fileWriter.write(new Blob([newEntry.data]));\n              });\n            } else if (!isAppend) {\n              // We might be modifying a write that was already buffered in memory.\n              // Slow linear search to find a block we might be overwriting\n              for (var i = 0; i < buffer.length; i++) {\n                var entry = buffer[i]; // If our new entry overlaps the old one in any way...\n\n                if (!(newEntry.offset + newEntry.length <= entry.offset || newEntry.offset >= entry.offset + entry.length)) {\n                  if (newEntry.offset < entry.offset || newEntry.offset + newEntry.length > entry.offset + entry.length) {\n                    throw new Error('Overwrite crosses blob boundaries');\n                  }\n\n                  if (newEntry.offset == entry.offset && newEntry.length == entry.length) {\n                    // We overwrote the entire block\n                    entry.data = newEntry.data; // We're done\n\n                    return;\n                  } else {\n                    return convertToUint8Array(entry.data).then(function (entryArray) {\n                      entry.data = entryArray;\n                      return convertToUint8Array(newEntry.data);\n                    }).then(function (newEntryArray) {\n                      newEntry.data = newEntryArray;\n                      entry.data.set(newEntry.data, newEntry.offset - entry.offset);\n                    });\n                  }\n                }\n              } // Else fall through to do a simple append, as we didn't overwrite any pre-existing blocks\n\n            }\n\n            buffer.push(newEntry);\n          });\n        };\n        /**\n         * Finish all writes to the buffer, returning a promise that signals when that is complete.\n         *\n         * If a FileWriter was not provided, the promise is resolved with a Blob that represents the completed BlobBuffer\n         * contents. You can optionally pass in a mimeType to be used for this blob.\n         *\n         * If a FileWriter was provided, the promise is resolved with null as the first argument.\n         */\n\n\n        this.complete = function (mimeType) {\n          if (fd || fileWriter) {\n            writePromise = writePromise.then(function () {\n              return null;\n            });\n          } else {\n            // After writes complete we need to merge the buffer to give to the caller\n            writePromise = writePromise.then(function () {\n              var result = [];\n\n              for (var i = 0; i < buffer.length; i++) {\n                result.push(buffer[i].data);\n              }\n\n              return new Blob(result, {\n                mimeType: mimeType\n              });\n            });\n          }\n\n          return writePromise;\n        };\n      };\n    }(isNodeEnviroment ? null : null);\n\n    window.BlobBuffer = BlobBuffer;\n    /**\n     * WebM video encoder for Google Chrome. This implementation is suitable for creating very large video files, because\n     * it can stream Blobs directly to a FileWriter without buffering the entire video in memory.\n     *\n     * When FileWriter is not available or not desired, it can buffer the video in memory as a series of Blobs which are\n     * eventually returned as one composite Blob.\n     *\n     * By Nicholas Sherlock.\n     *\n     * Based on the ideas from Whammy: https://github.com/antimatter15/whammy\n     *\n     * Released under the WTFPLv2 https://en.wikipedia.org/wiki/WTFPL\n     */\n\n    var WebMWriter = function (ArrayBufferDataStream, BlobBuffer) {\n      function extend(base, top) {\n        var target = {};\n        [base, top].forEach(function (obj) {\n          for (var prop in obj) {\n            if (Object.prototype.hasOwnProperty.call(obj, prop)) {\n              target[prop] = obj[prop];\n            }\n          }\n        });\n        return target;\n      }\n      /**\n       * Decode a Base64 data URL into a binary string.\n       *\n       * Returns the binary string, or false if the URL could not be decoded.\n       */\n\n\n      function decodeBase64WebPDataURL(url) {\n        if (typeof url !== 'string' || !url.match(/^data:image\\/webp;base64,/i)) {\n          return false;\n        }\n\n        return window.atob(url.substring('data:image/webp;base64,'.length));\n      }\n      /**\n       * Convert the given canvas to a WebP encoded image and return the image data as a string.\n       */\n\n\n      function renderAsWebP(canvas, quality) {\n        var frame = canvas.toDataURL('image/webp', {\n          quality: quality\n        });\n        return decodeBase64WebPDataURL(frame);\n      }\n\n      function extractKeyframeFromWebP(webP) {\n        // Assume that Chrome will generate a Simple Lossy WebP which has this header:\n        var keyframeStartIndex = webP.indexOf('VP8 ');\n\n        if (keyframeStartIndex == -1) {\n          throw 'Failed to identify beginning of keyframe in WebP image';\n        } // Skip the header and the 4 bytes that encode the length of the VP8 chunk\n\n\n        keyframeStartIndex += 'VP8 '.length + 4;\n        return webP.substring(keyframeStartIndex);\n      } // Just a little utility so we can tag values as floats for the EBML encoder's benefit\n\n\n      function EBMLFloat32(value) {\n        this.value = value;\n      }\n\n      function EBMLFloat64(value) {\n        this.value = value;\n      }\n      /**\n       * Write the given EBML object to the provided ArrayBufferStream.\n       *\n       * The buffer's first byte is at bufferFileOffset inside the video file. This is used to complete offset and\n       * dataOffset fields in each EBML structure, indicating the file offset of the first byte of the EBML element and\n       * its data payload.\n       */\n\n\n      function writeEBML(buffer, bufferFileOffset, ebml) {\n        // Is the ebml an array of sibling elements?\n        if (Array.isArray(ebml)) {\n          for (var i = 0; i < ebml.length; i++) {\n            writeEBML(buffer, bufferFileOffset, ebml[i]);\n          } // Is this some sort of raw data that we want to write directly?\n\n        } else if (typeof ebml === 'string') {\n          buffer.writeString(ebml);\n        } else if (ebml instanceof Uint8Array) {\n          buffer.writeBytes(ebml);\n        } else if (ebml.id) {\n          // We're writing an EBML element\n          ebml.offset = buffer.pos + bufferFileOffset;\n          buffer.writeUnsignedIntBE(ebml.id); // ID field\n          // Now we need to write the size field, so we must know the payload size:\n\n          if (Array.isArray(ebml.data)) {\n            // Writing an array of child elements. We won't try to measure the size of the children up-front\n            var sizePos, dataBegin, dataEnd;\n\n            if (ebml.size === -1) {\n              // Write the reserved all-one-bits marker to note that the size of this element is unknown/unbounded\n              buffer.writeByte(0xff);\n            } else {\n              sizePos = buffer.pos;\n              /* Write a dummy size field to overwrite later. 4 bytes allows an element maximum size of 256MB,\n               * which should be plenty (we don't want to have to buffer that much data in memory at one time\n               * anyway!)\n               */\n\n              buffer.writeBytes([0, 0, 0, 0]);\n            }\n\n            dataBegin = buffer.pos;\n            ebml.dataOffset = dataBegin + bufferFileOffset;\n            writeEBML(buffer, bufferFileOffset, ebml.data);\n\n            if (ebml.size !== -1) {\n              dataEnd = buffer.pos;\n              ebml.size = dataEnd - dataBegin;\n              buffer.seek(sizePos);\n              buffer.writeEBMLVarIntWidth(ebml.size, 4); // Size field\n\n              buffer.seek(dataEnd);\n            }\n          } else if (typeof ebml.data === 'string') {\n            buffer.writeEBMLVarInt(ebml.data.length); // Size field\n\n            ebml.dataOffset = buffer.pos + bufferFileOffset;\n            buffer.writeString(ebml.data);\n          } else if (typeof ebml.data === 'number') {\n            // Allow the caller to explicitly choose the size if they wish by supplying a size field\n            if (!ebml.size) {\n              ebml.size = buffer.measureUnsignedInt(ebml.data);\n            }\n\n            buffer.writeEBMLVarInt(ebml.size); // Size field\n\n            ebml.dataOffset = buffer.pos + bufferFileOffset;\n            buffer.writeUnsignedIntBE(ebml.data, ebml.size);\n          } else if (ebml.data instanceof EBMLFloat64) {\n            buffer.writeEBMLVarInt(8); // Size field\n\n            ebml.dataOffset = buffer.pos + bufferFileOffset;\n            buffer.writeDoubleBE(ebml.data.value);\n          } else if (ebml.data instanceof EBMLFloat32) {\n            buffer.writeEBMLVarInt(4); // Size field\n\n            ebml.dataOffset = buffer.pos + bufferFileOffset;\n            buffer.writeFloatBE(ebml.data.value);\n          } else if (ebml.data instanceof Uint8Array) {\n            buffer.writeEBMLVarInt(ebml.data.byteLength); // Size field\n\n            ebml.dataOffset = buffer.pos + bufferFileOffset;\n            buffer.writeBytes(ebml.data);\n          } else {\n            throw 'Bad EBML datatype ' + typeof ebml.data;\n          }\n        } else {\n          throw 'Bad EBML datatype ' + typeof ebml.data;\n        }\n      }\n\n      return function (options) {\n        var MAX_CLUSTER_DURATION_MSEC = 5000,\n            DEFAULT_TRACK_NUMBER = 1,\n            writtenHeader = false,\n            videoWidth,\n            videoHeight,\n            clusterFrameBuffer = [],\n            clusterStartTime = 0,\n            clusterDuration = 0,\n            optionDefaults = {\n          quality: 0.95,\n          // WebM image quality from 0.0 (worst) to 1.0 (best)\n          fileWriter: null,\n          // Chrome FileWriter in order to stream to a file instead of buffering to memory (optional)\n          fd: null,\n          // Node.JS file descriptor to write to instead of buffering (optional)\n          // You must supply one of:\n          frameDuration: null,\n          // Duration of frames in milliseconds\n          frameRate: null // Number of frames per second\n\n        },\n            seekPoints = {\n          Cues: {\n            id: new Uint8Array([0x1c, 0x53, 0xbb, 0x6b]),\n            positionEBML: null\n          },\n          SegmentInfo: {\n            id: new Uint8Array([0x15, 0x49, 0xa9, 0x66]),\n            positionEBML: null\n          },\n          Tracks: {\n            id: new Uint8Array([0x16, 0x54, 0xae, 0x6b]),\n            positionEBML: null\n          }\n        },\n            ebmlSegment,\n            segmentDuration = {\n          id: 0x4489,\n          // Duration\n          data: new EBMLFloat64(0)\n        },\n            seekHead,\n            cues = [],\n            blobBuffer = new BlobBuffer(options.fileWriter || options.fd);\n\n        function fileOffsetToSegmentRelative(fileOffset) {\n          return fileOffset - ebmlSegment.dataOffset;\n        }\n        /**\n         * Create a SeekHead element with descriptors for the points in the global seekPoints array.\n         *\n         * 5 bytes of position values are reserved for each node, which lie at the offset point.positionEBML.dataOffset,\n         * to be overwritten later.\n         */\n\n\n        function createSeekHead() {\n          var seekPositionEBMLTemplate = {\n            id: 0x53ac,\n            // SeekPosition\n            size: 5,\n            // Allows for 32GB video files\n            data: 0 // We'll overwrite this when the file is complete\n\n          },\n              result = {\n            id: 0x114d9b74,\n            // SeekHead\n            data: []\n          };\n\n          for (var name in seekPoints) {\n            var seekPoint = seekPoints[name];\n            seekPoint.positionEBML = Object.create(seekPositionEBMLTemplate);\n            result.data.push({\n              id: 0x4dbb,\n              // Seek\n              data: [{\n                id: 0x53ab,\n                // SeekID\n                data: seekPoint.id\n              }, seekPoint.positionEBML]\n            });\n          }\n\n          return result;\n        }\n        /**\n         * Write the WebM file header to the stream.\n         */\n\n\n        function writeHeader() {\n          seekHead = createSeekHead();\n          var ebmlHeader = {\n            id: 0x1a45dfa3,\n            // EBML\n            data: [{\n              id: 0x4286,\n              // EBMLVersion\n              data: 1\n            }, {\n              id: 0x42f7,\n              // EBMLReadVersion\n              data: 1\n            }, {\n              id: 0x42f2,\n              // EBMLMaxIDLength\n              data: 4\n            }, {\n              id: 0x42f3,\n              // EBMLMaxSizeLength\n              data: 8\n            }, {\n              id: 0x4282,\n              // DocType\n              data: 'webm'\n            }, {\n              id: 0x4287,\n              // DocTypeVersion\n              data: 2\n            }, {\n              id: 0x4285,\n              // DocTypeReadVersion\n              data: 2\n            }]\n          },\n              segmentInfo = {\n            id: 0x1549a966,\n            // Info\n            data: [{\n              id: 0x2ad7b1,\n              // TimecodeScale\n              data: 1e6 // Times will be in miliseconds (1e6 nanoseconds per step = 1ms)\n\n            }, {\n              id: 0x4d80,\n              // MuxingApp\n              data: 'webm-writer-js'\n            }, {\n              id: 0x5741,\n              // WritingApp\n              data: 'webm-writer-js'\n            }, segmentDuration // To be filled in later\n            ]\n          },\n              tracks = {\n            id: 0x1654ae6b,\n            // Tracks\n            data: [{\n              id: 0xae,\n              // TrackEntry\n              data: [{\n                id: 0xd7,\n                // TrackNumber\n                data: DEFAULT_TRACK_NUMBER\n              }, {\n                id: 0x73c5,\n                // TrackUID\n                data: DEFAULT_TRACK_NUMBER\n              }, {\n                id: 0x9c,\n                // FlagLacing\n                data: 0\n              }, {\n                id: 0x22b59c,\n                // Language\n                data: 'und'\n              }, {\n                id: 0x86,\n                // CodecID\n                data: 'V_VP8'\n              }, {\n                id: 0x258688,\n                // CodecName\n                data: 'VP8'\n              }, {\n                id: 0x83,\n                // TrackType\n                data: 1\n              }, {\n                id: 0xe0,\n                // Video\n                data: [{\n                  id: 0xb0,\n                  // PixelWidth\n                  data: videoWidth\n                }, {\n                  id: 0xba,\n                  // PixelHeight\n                  data: videoHeight\n                }]\n              }]\n            }]\n          };\n          ebmlSegment = {\n            id: 0x18538067,\n            // Segment\n            size: -1,\n            // Unbounded size\n            data: [seekHead, segmentInfo, tracks]\n          };\n          var bufferStream = new ArrayBufferDataStream(256);\n          writeEBML(bufferStream, blobBuffer.pos, [ebmlHeader, ebmlSegment]);\n          blobBuffer.write(bufferStream.getAsDataArray()); // Now we know where these top-level elements lie in the file:\n\n          seekPoints.SegmentInfo.positionEBML.data = fileOffsetToSegmentRelative(segmentInfo.offset);\n          seekPoints.Tracks.positionEBML.data = fileOffsetToSegmentRelative(tracks.offset);\n        }\n        /**\n         * Create a SimpleBlock keyframe header using these fields:\n         *     timecode    - Time of this keyframe\n         *     trackNumber - Track number from 1 to 126 (inclusive)\n         *     frame       - Raw frame data payload string\n         *\n         * Returns an EBML element.\n         */\n\n\n        function createKeyframeBlock(keyframe) {\n          var bufferStream = new ArrayBufferDataStream(1 + 2 + 1);\n\n          if (!(keyframe.trackNumber > 0 && keyframe.trackNumber < 127)) {\n            throw 'TrackNumber must be > 0 and < 127';\n          }\n\n          bufferStream.writeEBMLVarInt(keyframe.trackNumber); // Always 1 byte since we limit the range of trackNumber\n\n          bufferStream.writeU16BE(keyframe.timecode); // Flags byte\n\n          bufferStream.writeByte(1 << 7 // Keyframe\n          );\n          return {\n            id: 0xa3,\n            // SimpleBlock\n            data: [bufferStream.getAsDataArray(), keyframe.frame]\n          };\n        }\n        /**\n         * Create a Cluster node using these fields:\n         *\n         *    timecode    - Start time for the cluster\n         *\n         * Returns an EBML element.\n         */\n\n\n        function createCluster(cluster) {\n          return {\n            id: 0x1f43b675,\n            data: [{\n              id: 0xe7,\n              // Timecode\n              data: Math.round(cluster.timecode)\n            }]\n          };\n        }\n\n        function addCuePoint(trackIndex, clusterTime, clusterFileOffset) {\n          cues.push({\n            id: 0xbb,\n            // Cue\n            data: [{\n              id: 0xb3,\n              // CueTime\n              data: clusterTime\n            }, {\n              id: 0xb7,\n              // CueTrackPositions\n              data: [{\n                id: 0xf7,\n                // CueTrack\n                data: trackIndex\n              }, {\n                id: 0xf1,\n                // CueClusterPosition\n                data: fileOffsetToSegmentRelative(clusterFileOffset)\n              }]\n            }]\n          });\n        }\n        /**\n         * Write a Cues element to the blobStream using the global `cues` array of CuePoints (use addCuePoint()).\n         * The seek entry for the Cues in the SeekHead is updated.\n         */\n\n\n        function writeCues() {\n          var ebml = {\n            id: 0x1c53bb6b,\n            data: cues\n          },\n              cuesBuffer = new ArrayBufferDataStream(16 + cues.length * 32); // Pretty crude estimate of the buffer size we'll need\n\n          writeEBML(cuesBuffer, blobBuffer.pos, ebml);\n          blobBuffer.write(cuesBuffer.getAsDataArray()); // Now we know where the Cues element has ended up, we can update the SeekHead\n\n          seekPoints.Cues.positionEBML.data = fileOffsetToSegmentRelative(ebml.offset);\n        }\n        /**\n         * Flush the frames in the current clusterFrameBuffer out to the stream as a Cluster.\n         */\n\n\n        function flushClusterFrameBuffer() {\n          if (clusterFrameBuffer.length == 0) {\n            return;\n          } // First work out how large of a buffer we need to hold the cluster data\n\n\n          var rawImageSize = 0;\n\n          for (var i = 0; i < clusterFrameBuffer.length; i++) {\n            rawImageSize += clusterFrameBuffer[i].frame.length;\n          }\n\n          var buffer = new ArrayBufferDataStream(rawImageSize + clusterFrameBuffer.length * 32),\n              // Estimate 32 bytes per SimpleBlock header\n          cluster = createCluster({\n            timecode: Math.round(clusterStartTime)\n          });\n\n          for (var i = 0; i < clusterFrameBuffer.length; i++) {\n            cluster.data.push(createKeyframeBlock(clusterFrameBuffer[i]));\n          }\n\n          writeEBML(buffer, blobBuffer.pos, cluster);\n          blobBuffer.write(buffer.getAsDataArray());\n          addCuePoint(DEFAULT_TRACK_NUMBER, Math.round(clusterStartTime), cluster.offset);\n          clusterFrameBuffer = [];\n          clusterStartTime += clusterDuration;\n          clusterDuration = 0;\n        }\n\n        function validateOptions() {\n          // Derive frameDuration setting if not already supplied\n          if (!options.frameDuration) {\n            if (options.frameRate) {\n              options.frameDuration = 1000 / options.frameRate;\n            } else {\n              throw 'Missing required frameDuration or frameRate setting';\n            }\n          }\n        }\n\n        function addFrameToCluster(frame) {\n          frame.trackNumber = DEFAULT_TRACK_NUMBER; // Frame timecodes are relative to the start of their cluster:\n\n          frame.timecode = Math.round(clusterDuration);\n          clusterFrameBuffer.push(frame);\n          clusterDuration += frame.duration;\n\n          if (clusterDuration >= MAX_CLUSTER_DURATION_MSEC) {\n            flushClusterFrameBuffer();\n          }\n        }\n        /**\n         * Rewrites the SeekHead element that was initially written to the stream with the offsets of top level elements.\n         *\n         * Call once writing is complete (so the offset of all top level elements is known).\n         */\n\n\n        function rewriteSeekHead() {\n          var seekHeadBuffer = new ArrayBufferDataStream(seekHead.size),\n              oldPos = blobBuffer.pos; // Write the rewritten SeekHead element's data payload to the stream (don't need to update the id or size)\n\n          writeEBML(seekHeadBuffer, seekHead.dataOffset, seekHead.data); // And write that through to the file\n\n          blobBuffer.seek(seekHead.dataOffset);\n          blobBuffer.write(seekHeadBuffer.getAsDataArray());\n          blobBuffer.seek(oldPos);\n        }\n        /**\n         * Rewrite the Duration field of the Segment with the newly-discovered video duration.\n         */\n\n\n        function rewriteDuration() {\n          var buffer = new ArrayBufferDataStream(8),\n              oldPos = blobBuffer.pos; // Rewrite the data payload (don't need to update the id or size)\n\n          buffer.writeDoubleBE(clusterStartTime); // And write that through to the file\n\n          blobBuffer.seek(segmentDuration.dataOffset);\n          blobBuffer.write(buffer.getAsDataArray());\n          blobBuffer.seek(oldPos);\n        }\n        /**\n         * Add a frame to the video. Currently the frame must be a Canvas element.\n         */\n\n\n        this.addFrame = function (canvas) {\n          if (writtenHeader) {\n            if (canvas.width != videoWidth || canvas.height != videoHeight) {\n              throw 'Frame size differs from previous frames';\n            }\n          } else {\n            videoWidth = canvas.width;\n            videoHeight = canvas.height;\n            writeHeader();\n            writtenHeader = true;\n          }\n\n          var webP = renderAsWebP(canvas, {\n            quality: options.quality\n          });\n\n          if (!webP) {\n            throw \"Couldn't decode WebP frame, does the browser support WebP?\";\n          }\n\n          addFrameToCluster({\n            frame: extractKeyframeFromWebP(webP),\n            duration: options.frameDuration\n          });\n        };\n        /**\n         * Finish writing the video and return a Promise to signal completion.\n         *\n         * If the destination device was memory (i.e. options.fileWriter was not supplied), the Promise is resolved with\n         * a Blob with the contents of the entire video.\n         */\n\n\n        this.complete = function () {\n          flushClusterFrameBuffer();\n          writeCues();\n          rewriteSeekHead();\n          rewriteDuration();\n          return blobBuffer.complete('video/webm');\n        };\n\n        this.getWrittenSize = function () {\n          return blobBuffer.length;\n        };\n\n        options = extend(optionDefaults, options || {});\n        validateOptions();\n      };\n    };\n\n    if (isNodeEnviroment) {\n      module.exports = WebMWriter(ArrayBufferDataStream, BlobBuffer);\n    } else {\n      window.WebMWriter = WebMWriter(ArrayBufferDataStream, BlobBuffer);\n    }\n  })();\n})(webmWriter0_2_0);\n\n(function (module, exports) {\n  !function () {\n\n    var t = void 0 !== module.exports,\n        e = t ? tar.exports : window.Tar,\n        M = t ? download.exports : window.download,\n        i = t ? gif.GIF : window.GIF,\n        n = t ? webmWriter0_2_0.exports : window.WebMWriter,\n        o = {\n      function: !0,\n      object: !0\n    };\n\n    function r(t) {\n      return t && t.Object === Object ? t : null;\n    }\n    var a = exports && !exports.nodeType ? exports : void 0,\n        s = module && !module.nodeType ? module : void 0,\n        c = s && s.exports === a ? a : void 0,\n        h = r(a && s && 'object' == typeof _commonjsHelpers_1c8beb5f_js__WEBPACK_IMPORTED_MODULE_0__.c && _commonjsHelpers_1c8beb5f_js__WEBPACK_IMPORTED_MODULE_0__.c),\n        p = r(o[typeof self] && self),\n        m = r(o[typeof window] && window),\n        d = r(o[typeof this] && this),\n        u = h || m !== (d && d.window) && m || p || d || Function('return this')();\n\n    function l(t) {\n      return String('0000000' + t).slice(-7);\n    }\n\n    'gc' in window || (window.gc = function () {}), HTMLCanvasElement.prototype.toBlob || Object.defineProperty(HTMLCanvasElement.prototype, 'toBlob', {\n      value: function (t, e, i) {\n        for (var n = atob(this.toDataURL(e, i).split(',')[1]), o = n.length, r = new Uint8Array(o), a = 0; a < o; a++) r[a] = n.charCodeAt(a);\n\n        t(new Blob([r], {\n          type: e || 'image/png'\n        }));\n      }\n    }), function () {\n      if ('performance' in window == 0 && (window.performance = {}), Date.now = Date.now || function () {\n        return new Date().getTime();\n      }, 'now' in window.performance == 0) {\n        var t = Date.now();\n        performance.timing && performance.timing.navigationStart && (t = performance.timing.navigationStart), window.performance.now = function () {\n          return Date.now() - t;\n        };\n      }\n    }();\n    var W = window.Date.now();\n\n    function f(t) {\n      var i = {};\n      this.settings = t, this.on = function (t, e) {\n        i[t] = e;\n      }, this.emit = function (t) {\n        var e = i[t];\n        e && e.apply(null, Array.prototype.slice.call(arguments, 1));\n      }, this.filename = t.name || function () {\n        function t() {\n          return Math.floor(65536 * (1 + Math.random())).toString(16).substring(1);\n        }\n\n        return t() + t() + '-' + t() + '-' + t() + '-' + t() + '-' + t() + t() + t();\n      }(), this.extension = '', this.mimeType = '';\n    }\n\n    function w(t) {\n      f.call(this, t), this.extension = '.tar', this.mimeType = 'application/x-tar', this.fileExtension = '', this.baseFilename = this.filename, this.tape = null, this.count = 0, this.part = 1, this.frames = 0;\n    }\n\n    function z(t) {\n      w.call(this, t), this.type = 'image/png', this.fileExtension = '.png';\n    }\n\n    function U(t) {\n      w.call(this, t), this.type = 'image/jpeg', this.fileExtension = '.jpg', this.quality = t.quality / 100 || 0.8;\n    }\n\n    function _(t) {\n      'image/webp' !== document.createElement('canvas').toDataURL('image/webp').substr(5, 10) && console.log('WebP not supported - try another export format'), f.call(this, t), this.quality = t.quality / 100 || 0.8, this.extension = '.webm', this.mimeType = 'video/webm', this.baseFilename = this.filename, this.framerate = t.framerate, this.frames = 0, this.part = 1, this.videoWriter = new n({\n        quality: this.quality,\n        fileWriter: null,\n        fd: null,\n        frameRate: this.framerate\n      });\n    }\n\n    function H(t) {\n      f.call(this, t), t.quality = t.quality / 100 || 0.8, this.encoder = new FFMpegServer.Video(t), this.encoder.on('process', function () {\n        this.emit('process');\n      }.bind(this)), this.encoder.on('finished', function (t, e) {\n        var i = this.callback;\n        i && (this.callback = void 0, i(t, e));\n      }.bind(this)), this.encoder.on('progress', function (t) {\n        this.settings.onProgress && this.settings.onProgress(t);\n      }.bind(this)), this.encoder.on('error', function (t) {\n        alert(JSON.stringify(t, null, 2));\n      }.bind(this));\n    }\n\n    function V(t) {\n      f.call(this, t), this.framerate = this.settings.framerate, this.type = 'video/webm', this.extension = '.webm', this.stream = null, this.mediaRecorder = null, this.chunks = [];\n    }\n\n    function G(t) {\n      f.call(this, t), t.quality = 31 - (30 * t.quality / 100 || 10), t.workers = t.workers || 4, this.extension = '.gif', this.mimeType = 'image/gif', this.canvas = document.createElement('canvas'), this.ctx = this.canvas.getContext('2d'), this.sizeSet = !1, this.encoder = new i({\n        workers: t.workers,\n        quality: t.quality,\n        workerScript: t.workersPath + 'gif.worker.js'\n      }), this.encoder.on('progress', function (t) {\n        this.settings.onProgress && this.settings.onProgress(t);\n      }.bind(this)), this.encoder.on('finished', function (t) {\n        var e = this.callback;\n        e && (this.callback = void 0, e(t));\n      }.bind(this));\n    }\n\n    function y(t) {\n      var e,\n          n,\n          o,\n          r,\n          a,\n          i,\n          s,\n          c = t || {},\n          h = ([]),\n          p = [],\n          m = 0,\n          d = 0,\n          u = [],\n          l = !1,\n          f = {};\n      c.framerate = c.framerate || 60, c.motionBlurFrames = 2 * (c.motionBlurFrames || 1), e = c.verbose || !1, c.display, c.step = 1e3 / c.framerate, c.timeLimit = c.timeLimit || 0, c.frameLimit = c.frameLimit || 0, c.startTime = c.startTime || 0;\n      var w = document.createElement('div');\n      w.style.position = 'absolute', w.style.left = w.style.top = 0, w.style.backgroundColor = 'black', w.style.fontFamily = 'monospace', w.style.fontSize = '11px', w.style.padding = '5px', w.style.color = 'red', w.style.zIndex = 1e5, c.display && document.body.appendChild(w);\n      var y,\n          g,\n          v = document.createElement('canvas'),\n          b = v.getContext('2d');\n      P('Step is set to ' + c.step + 'ms');\n      var T = {\n        gif: G,\n        webm: _,\n        ffmpegserver: H,\n        png: z,\n        jpg: U,\n        'webm-mediarecorder': V\n      },\n          F = T[c.format];\n      if (!F) throw 'Error: Incorrect or missing format: Valid formats are ' + Object.keys(T).join(', ');\n\n      if ((s = new F(c)).step = i, s.on('process', R), s.on('progress', function (t) {\n        !function (t) {\n          var e = f[t];\n          e && e.apply(null, Array.prototype.slice.call(arguments, 1));\n        }('progress', t);\n      }), 'performance' in window == 0 && (window.performance = {}), Date.now = Date.now || function () {\n        return new Date().getTime();\n      }, 'now' in window.performance == 0) {\n        var x = Date.now();\n        performance.timing && performance.timing.navigationStart && (x = performance.timing.navigationStart), window.performance.now = function () {\n          return Date.now() - x;\n        };\n      }\n\n      var k = window.setTimeout,\n          S = window.setInterval,\n          D = window.clearInterval,\n          C = window.clearTimeout,\n          q = window.requestAnimationFrame,\n          j = window.Date.now,\n          I = window.performance.now,\n          O = window.Date.prototype.getTime,\n          B = [];\n\n      function E() {\n        l = !1, s.stop(), P('Capturer stop'), window.setTimeout = k, window.setInterval = S, window.clearInterval = D, window.clearTimeout = C, window.requestAnimationFrame = q, window.Date.prototype.getTime = O, window.Date.now = j, window.performance.now = I;\n      }\n\n      function L(t, e) {\n        k(t, 0, e);\n      }\n\n      function i() {\n        L(R);\n      }\n\n      function R() {\n        var t = 1e3 / c.framerate,\n            e = (m + d / c.motionBlurFrames) * t;\n        n = o + e, r = a + e, B.forEach(function (t) {\n          t._hookedTime = e / 1e3;\n        }), function () {\n          var t = m / c.framerate;\n          (c.frameLimit && m >= c.frameLimit || c.timeLimit && t >= c.timeLimit) && (E(), A());\n          var e = new Date(null);\n          e.setSeconds(t), 2 < c.motionBlurFrames ? w.textContent = 'CCapture ' + c.format + ' | ' + m + ' frames (' + d + ' inter) | ' + e.toISOString().substr(11, 8) : w.textContent = 'CCapture ' + c.format + ' | ' + m + ' frames | ' + e.toISOString().substr(11, 8);\n        }(), P('Frame: ' + m + ' ' + d);\n\n        for (var i = 0; i < h.length; i++) n >= h[i].triggerTime && (L(h[i].callback), h.splice(i, 1));\n\n        for (i = 0; i < p.length; i++) n >= p[i].triggerTime && (L(p[i].callback), p[i].triggerTime += p[i].time);\n\n        u.forEach(function (t) {\n          L(t, n - W);\n        }), u = [];\n      }\n\n      function A(t) {\n        t || (t = function (t) {\n          return M(t, s.filename + s.extension, s.mimeType), !1;\n        }), s.save(t);\n      }\n\n      function P(t) {\n        e && console.log(t);\n      }\n\n      return {\n        start: function () {\n          !function () {\n            function t() {\n              return this._hooked || (this._hooked = !0, this._hookedTime = this.currentTime || 0, this.pause(), B.push(this)), this._hookedTime + c.startTime;\n            }\n\n            P('Capturer start'), o = window.Date.now(), n = o + c.startTime, a = window.performance.now(), r = a + c.startTime, window.Date.prototype.getTime = function () {\n              return n;\n            }, window.Date.now = function () {\n              return n;\n            }, window.setTimeout = function (t, e) {\n              e = 5000000;\n              var i = {\n                callback: t,\n                time: e,\n                triggerTime: n + e\n              };\n              return h.push(i), P('Timeout set to ' + i.time), i;\n            }, window.clearTimeout = function (t) {\n              for (var e = 0; e < h.length; e++) h[e] != t || (h.splice(e, 1), P('Timeout cleared'));\n            }, window.setInterval = function (t, e) {\n              e = 5000000;\n              var i = {\n                callback: t,\n                time: e,\n                triggerTime: n + e\n              };\n              return p.push(i), P('Interval set to ' + i.time), i;\n            }, window.clearInterval = function (t) {\n              return P('clear Interval'), null;\n            }, window.requestAnimationFrame = function (t) {\n              u.push(t);\n            }, window.performance.now = function () {\n              return r;\n            };\n\n            try {\n              Object.defineProperty(HTMLVideoElement.prototype, 'currentTime', {\n                get: t\n              }), Object.defineProperty(HTMLAudioElement.prototype, 'currentTime', {\n                get: t\n              });\n            } catch (t) {\n              P(t);\n            }\n          }(), s.start(), l = !0;\n        },\n        capture: function (t) {\n          var e;\n          l && (2 < c.motionBlurFrames ? (e = t, v.width === e.width && v.height === e.height || (v.width = e.width, v.height = e.height, y = new Uint16Array(v.height * v.width * 4), b.fillStyle = '#0', b.fillRect(0, 0, v.width, v.height)), function (t) {\n            b.drawImage(t, 0, 0), g = b.getImageData(0, 0, v.width, v.height);\n\n            for (var e = 0; e < y.length; e += 4) y[e] += g.data[e], y[e + 1] += g.data[e + 1], y[e + 2] += g.data[e + 2];\n\n            d++;\n          }(t), d >= 0.5 * c.motionBlurFrames ? function () {\n            for (var t = g.data, e = 0; e < y.length; e += 4) t[e] = 2 * y[e] / c.motionBlurFrames, t[e + 1] = 2 * y[e + 1] / c.motionBlurFrames, t[e + 2] = 2 * y[e + 2] / c.motionBlurFrames;\n\n            for (b.putImageData(g, 0, 0), s.add(v), d = 0, P('Full MB Frame! ' + ++m + ' ' + n), e = 0; e < y.length; e += 4) y[e] = 0, y[e + 1] = 0, y[e + 2] = 0;\n\n            gc();\n          }() : i()) : (s.add(t), P('Full Frame! ' + ++m)));\n        },\n        stop: E,\n        save: A,\n        on: function (t, e) {\n          f[t] = e;\n        }\n      };\n    }\n    f.prototype.start = function () {}, f.prototype.stop = function () {}, f.prototype.add = function () {}, f.prototype.save = function () {}, f.prototype.dispose = function () {}, f.prototype.safeToProceed = function () {\n      return !0;\n    }, f.prototype.step = function () {\n      console.log('Step not set!');\n    }, (w.prototype = Object.create(f.prototype)).start = function () {\n      this.dispose();\n    }, w.prototype.add = function (t) {\n      var e = new FileReader();\n      e.onload = function () {\n        this.tape.append(l(this.count) + this.fileExtension, new Uint8Array(e.result)), 0 < this.settings.autoSaveTime && this.frames / this.settings.framerate >= this.settings.autoSaveTime ? this.save(function (t) {\n          this.filename = this.baseFilename + '-part-' + l(this.part), M(t, this.filename + this.extension, this.mimeType);\n          var e = this.count;\n          this.dispose(), this.count = e + 1, this.part++, this.filename = this.baseFilename + '-part-' + l(this.part), this.frames = 0, this.step();\n        }.bind(this)) : (this.count++, this.frames++, this.step());\n      }.bind(this), e.readAsArrayBuffer(t);\n    }, w.prototype.save = function (t) {\n      t(this.tape.save());\n    }, w.prototype.dispose = function () {\n      this.tape = new e(), this.count = 0;\n    }, (z.prototype = Object.create(w.prototype)).add = function (t) {\n      t.toBlob(function (t) {\n        w.prototype.add.call(this, t);\n      }.bind(this), this.type);\n    }, (U.prototype = Object.create(w.prototype)).add = function (t) {\n      t.toBlob(function (t) {\n        w.prototype.add.call(this, t);\n      }.bind(this), this.type, this.quality);\n    }, (_.prototype = Object.create(f.prototype)).start = function (t) {\n      this.dispose();\n    }, _.prototype.add = function (t) {\n      this.videoWriter.addFrame(t), 0 < this.settings.autoSaveTime && this.frames / this.settings.framerate >= this.settings.autoSaveTime ? this.save(function (t) {\n        this.filename = this.baseFilename + '-part-' + l(this.part), M(t, this.filename + this.extension, this.mimeType), this.dispose(), this.part++, this.filename = this.baseFilename + '-part-' + l(this.part), this.step();\n      }.bind(this)) : (this.frames++, this.step());\n    }, _.prototype.save = function (t) {\n      this.videoWriter.complete().then(t);\n    }, _.prototype.dispose = function (t) {\n      this.frames = 0, this.videoWriter = new n({\n        quality: this.quality,\n        fileWriter: null,\n        fd: null,\n        frameRate: this.framerate\n      });\n    }, (H.prototype = Object.create(f.prototype)).start = function () {\n      this.encoder.start(this.settings);\n    }, H.prototype.add = function (t) {\n      this.encoder.add(t);\n    }, H.prototype.save = function (t) {\n      this.callback = t, this.encoder.end();\n    }, H.prototype.safeToProceed = function () {\n      return this.encoder.safeToProceed();\n    }, (V.prototype = Object.create(f.prototype)).add = function (t) {\n      this.stream || (this.stream = t.captureStream(this.framerate), this.mediaRecorder = new MediaRecorder(this.stream), this.mediaRecorder.start(), this.mediaRecorder.ondataavailable = function (t) {\n        this.chunks.push(t.data);\n      }.bind(this)), this.step();\n    }, V.prototype.save = function (i) {\n      this.mediaRecorder.onstop = function (t) {\n        var e = new Blob(this.chunks, {\n          type: 'video/webm'\n        });\n        this.chunks = [], i(e);\n      }.bind(this), this.mediaRecorder.stop();\n    }, (G.prototype = Object.create(f.prototype)).add = function (t) {\n      this.sizeSet || (this.encoder.setOption('width', t.width), this.encoder.setOption('height', t.height), this.sizeSet = !0), this.canvas.width = t.width, this.canvas.height = t.height, this.ctx.drawImage(t, 0, 0), this.encoder.addFrame(this.ctx, {\n        copy: !0,\n        delay: this.settings.step\n      }), this.step();\n    }, G.prototype.save = function (t) {\n      this.callback = t, this.encoder.render();\n    }, (m || p || {}).CCapture = y, a && s ? (c && ((s.exports = y).CCapture = y), a.CCapture = y) : u.CCapture = y;\n  }();\n})(CCapture_min$2, CCapture_min$2.exports);\n\nvar CCapture_min = CCapture_min$2.exports;\n\nvar CCapture_min$1 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.assign(/*#__PURE__*/Object.create(null), CCapture_min$2.exports, {\n  'default': CCapture_min\n}));\n\n\n//# sourceMappingURL=CCapture.min-23f4504b.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../react-swift/dist/CCapture.min-23f4504b.js\n");

/***/ }),

/***/ "../../react-swift/dist/_commonjsHelpers-1c8beb5f.js":
/*!***********************************************************!*\
  !*** ../../react-swift/dist/_commonjsHelpers-1c8beb5f.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"c\": function() { return /* binding */ commonjsGlobal; }\n/* harmony export */ });\nvar commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\n\n//# sourceMappingURL=_commonjsHelpers-1c8beb5f.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uLy4uL3JlYWN0LXN3aWZ0L2Rpc3QvX2NvbW1vbmpzSGVscGVycy0xYzhiZWI1Zi5qcz8yZDYzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7QUFFK0I7QUFDL0IiLCJmaWxlIjoiLi4vLi4vcmVhY3Qtc3dpZnQvZGlzdC9fY29tbW9uanNIZWxwZXJzLTFjOGJlYjVmLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGNvbW1vbmpzR2xvYmFsID0gdHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsVGhpcyA6IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWwgOiB0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgPyBzZWxmIDoge307XG5cbmV4cG9ydCB7IGNvbW1vbmpzR2xvYmFsIGFzIGMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPV9jb21tb25qc0hlbHBlcnMtMWM4YmViNWYuanMubWFwXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../react-swift/dist/_commonjsHelpers-1c8beb5f.js\n");

/***/ })

}]);